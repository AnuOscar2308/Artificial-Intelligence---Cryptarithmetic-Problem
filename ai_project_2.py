# -*- coding: utf-8 -*-
"""AI_PROJECT_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZyLbXNdRp0XZOEY9TyAizu2CZ7HKyVDm
"""

from google.colab import files

uploaded = files.upload()

from itertools import permutations

def letters_to_numbers(letters, assignment):
    return int(''.join(str(assignment[letter]) for letter in letters))

def satisfies_constraints(assignment, first_addend, second_addend, sum_result):
    num1 = letters_to_numbers(first_addend, assignment)
    num2 = letters_to_numbers(second_addend, assignment)
    total = letters_to_numbers(sum_result, assignment)
    return num1 + num2 == total

def find_solution(first_addend, second_addend, sum_result, leading_digits):
    all_letters = set(first_addend + second_addend + sum_result)

    for perm in permutations(range(10), len(all_letters)):
        assignment = dict(zip(all_letters, perm))

        if all(assignment[leading] != 0 for leading in leading_digits):
            if satisfies_constraints(assignment, first_addend, second_addend, sum_result):
                return assignment

    return None

# Reading inputs from the input file
def read_input_file(file_path):
    with open(file_path, 'r') as file:
        first_addend = file.readline().strip()
        second_addend = file.readline().strip()
        sum_result = file.readline().strip()
    return first_addend, second_addend, sum_result

#Writing the output to the output file
def write_output_file(file_path, solution, first_addend, second_addend, sum_result):
    with open(file_path, 'w') as file:
        for word in [first_addend, second_addend, sum_result]:
            row = [solution[letter] for letter in word]
            file.write(''.join(str(digit) for digit in row))
            file.write('\n')

# input and output file paths
input_file_path = 'Input2.txt'
output_file_path = 'Output2.txt'

# Calling the read function
first_addend, second_addend, sum_result = read_input_file(input_file_path)

# Defining leading_digits which should not be zero
leading_digits = first_addend[0] + second_addend[0] + sum_result[0]

# Finding a solution
solution = find_solution(first_addend, second_addend, sum_result, leading_digits)

# Calling the write function
if solution is not None:
    write_output_file(output_file_path, solution, first_addend, second_addend, sum_result)
else:
    print("No solution found for the given puzzle.")